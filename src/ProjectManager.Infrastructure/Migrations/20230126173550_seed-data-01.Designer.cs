// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManager.Infrastructure.Data;

#nullable disable

namespace ProjectManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230126173550_seed-data-01")]
    partial class seeddata01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.Property<int>("AssignmentsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("AssignmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AssignmentUser");

                    b.HasData(
                        new
                        {
                            AssignmentsId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            AssignmentsId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            AssignmentsId = 1,
                            UsersId = 3
                        },
                        new
                        {
                            AssignmentsId = 1,
                            UsersId = 4
                        },
                        new
                        {
                            AssignmentsId = 2,
                            UsersId = 1
                        },
                        new
                        {
                            AssignmentsId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            AssignmentsId = 2,
                            UsersId = 3
                        },
                        new
                        {
                            AssignmentsId = 2,
                            UsersId = 4
                        });
                });

            modelBuilder.Entity("ChatChannelUser", b =>
                {
                    b.Property<int>("ChatChannelsId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissedUsersId")
                        .HasColumnType("integer");

                    b.HasKey("ChatChannelsId", "PermissedUsersId");

                    b.HasIndex("PermissedUsersId");

                    b.ToTable("UserChats", (string)null);
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 1, 29, 17, 35, 49, 701, DateTimeKind.Utc).AddTicks(8364),
                            Description = "As in title",
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 1, 31, 17, 35, 49, 701, DateTimeKind.Utc).AddTicks(8519),
                            Description = "For customers",
                            Name = "Demo presentation"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 1, 31, 17, 35, 49, 701, DateTimeKind.Utc).AddTicks(8521),
                            Description = "On Teams video conference",
                            Name = "Brainstorming"
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentStageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentStageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentStageId = 1,
                            Deadline = new DateTime(2023, 1, 30, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(1367),
                            Description = "Services are broken and need to be optimized.",
                            Name = "Refactor services",
                            Priority = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignmentStageId = 1,
                            Deadline = new DateTime(2023, 2, 1, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(1373),
                            Description = "There are some problems with components that need to be fixed.",
                            Name = "Frontend bugs",
                            Priority = 2,
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.AssignmentStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("AssignmentStages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Index = 1,
                            Name = "To Do",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Index = 3,
                            Name = "In Progress",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Index = 2,
                            Name = "Done",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.ChatChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ChatChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Daily",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "General",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Daily",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "General",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Daily",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatChannelId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatChannelId = 1,
                            Content = "This is test message @Kadie Rooney @Noriah Craig",
                            PostDate = new DateTime(2023, 1, 24, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(3652),
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChatChannelId = 1,
                            Content = "This is test message.",
                            PostDate = new DateTime(2023, 1, 24, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(3654),
                            ProjectId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.InvitationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("InvitationLinks");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "You have been mentioned in Project Manager #General chat.",
                            Date = new DateTime(2023, 1, 25, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(4376),
                            IsSeen = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Hugh Campbell has moved the assignment to the next stage.",
                            Date = new DateTime(2023, 1, 25, 17, 35, 49, 964, DateTimeKind.Utc).AddTicks(4377),
                            IsSeen = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("PrivateMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is test message.",
                            IsSeen = true,
                            PostDate = new DateTime(2023, 1, 25, 17, 5, 49, 965, DateTimeKind.Utc).AddTicks(3840),
                            ReceiverId = 2,
                            SenderId = 2
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is test message.",
                            IsSeen = false,
                            PostDate = new DateTime(2023, 1, 23, 16, 55, 49, 965, DateTimeKind.Utc).AddTicks(3842),
                            ReceiverId = 2,
                            SenderId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "This is test message.",
                            IsSeen = false,
                            PostDate = new DateTime(2023, 1, 22, 16, 45, 49, 965, DateTimeKind.Utc).AddTicks(3843),
                            ReceiverId = 1,
                            SenderId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "This is test message.",
                            IsSeen = false,
                            PostDate = new DateTime(2023, 1, 24, 17, 15, 49, 965, DateTimeKind.Utc).AddTicks(3844),
                            ReceiverId = 1,
                            SenderId = 4
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Project2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManagerId = 1,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 2,
                            ManagerId = 1,
                            Name = "Digital Library"
                        },
                        new
                        {
                            Id = 3,
                            ManagerId = 1,
                            Name = "Office Management"
                        });
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Role")
                        .HasColumnType("integer");

                    b.Property<int?>("Specialization")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "rooney@gmail.com",
                            Firstname = "Kadie",
                            Lastname = "Rooney",
                            Password = "AKSjnVFBcTQXExt0sCHkfHmPXzIvUs/bgfk408knGZeX+E1X4aWeXqlmunzw306kkA==",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "campbell@gmail.com",
                            Firstname = "Hugh",
                            Lastname = "Campbell",
                            Password = "AKSjnVFBcTQXExt0sCHkfHmPXzIvUs/bgfk408knGZeX+E1X4aWeXqlmunzw306kkA==",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "craig@gmail.com",
                            Firstname = "Noriah",
                            Lastname = "Craig",
                            Password = "AKSjnVFBcTQXExt0sCHkfHmPXzIvUs/bgfk408knGZeX+E1X4aWeXqlmunzw306kkA==",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "morgan@gmail.com",
                            Firstname = "Arthur",
                            Lastname = "Morgan",
                            Password = "AKSjnVFBcTQXExt0sCHkfHmPXzIvUs/bgfk408knGZeX+E1X4aWeXqlmunzw306kkA==",
                            Role = 1
                        });
                });

            modelBuilder.Entity("UserAppointments", b =>
                {
                    b.Property<int>("AppointmentsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserAppointments");

                    b.HasData(
                        new
                        {
                            AppointmentsId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            AppointmentsId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            AppointmentsId = 1,
                            UsersId = 3
                        },
                        new
                        {
                            AppointmentsId = 1,
                            UsersId = 4
                        },
                        new
                        {
                            AppointmentsId = 2,
                            UsersId = 1
                        },
                        new
                        {
                            AppointmentsId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            AppointmentsId = 2,
                            UsersId = 3
                        },
                        new
                        {
                            AppointmentsId = 2,
                            UsersId = 4
                        },
                        new
                        {
                            AppointmentsId = 3,
                            UsersId = 1
                        },
                        new
                        {
                            AppointmentsId = 3,
                            UsersId = 2
                        },
                        new
                        {
                            AppointmentsId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            AppointmentsId = 3,
                            UsersId = 4
                        });
                });

            modelBuilder.Entity("UserProjects", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserProjects");

                    b.HasData(
                        new
                        {
                            ProjectsId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            ProjectsId = 1,
                            UsersId = 3
                        },
                        new
                        {
                            ProjectsId = 1,
                            UsersId = 4
                        },
                        new
                        {
                            ProjectsId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            ProjectsId = 2,
                            UsersId = 3
                        },
                        new
                        {
                            ProjectsId = 2,
                            UsersId = 4
                        },
                        new
                        {
                            ProjectsId = 3,
                            UsersId = 2
                        },
                        new
                        {
                            ProjectsId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            ProjectsId = 3,
                            UsersId = 4
                        });
                });

            modelBuilder.Entity("AssignmentUser", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatChannelUser", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.ChatChannel", null)
                        .WithMany()
                        .HasForeignKey("ChatChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("PermissedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Assignment", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.AssignmentStage", "AssignmentStage")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignmentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentStage");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.AssignmentStage", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", "Project")
                        .WithMany("AssignmentStages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.ChatChannel", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", "Project")
                        .WithMany("ChatChannels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.ChatMessage", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.ChatChannel", "ChatChannel")
                        .WithMany("Messages")
                        .HasForeignKey("ChatChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", "Project")
                        .WithMany("Messages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatChannel");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.InvitationLink", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", "Project")
                        .WithMany("InvitationLinks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Notification", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.PrivateMessage", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", "Receiver")
                        .WithMany("PrivateMessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", "Sender")
                        .WithMany("PrivateMessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Project2", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", "Manager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("UserAppointments", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserProjects", b =>
                {
                    b.HasOne("ProjectManager.Core.ProjectAggregate.Project2", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManager.Core.ProjectAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.AssignmentStage", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.ChatChannel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.Project2", b =>
                {
                    b.Navigation("AssignmentStages");

                    b.Navigation("Assignments");

                    b.Navigation("ChatChannels");

                    b.Navigation("InvitationLinks");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ProjectManager.Core.ProjectAggregate.User", b =>
                {
                    b.Navigation("ManagedProjects");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PrivateMessagesReceived");

                    b.Navigation("PrivateMessagesSent");
                });
#pragma warning restore 612, 618
        }
    }
}
